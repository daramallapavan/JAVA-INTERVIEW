What is Java
--------------------

Java is a Object oriented Programming language. It is one of the most popular programming languages in the world.

Java is commonly used for web development, mobile apps, and software applications.

Java is the most used language in top companies such as Uber, Google, Netflix, Instagram, Spotify, Amazon, and many more because of its features and performance.




Features
------------

High Performance:
->JIT stands for Just-In-Time and it is used for improving the performance during run time.
->  the Java source code (.java) conversion to byte code (.class) occurs with the help of the java c compiler.
-> Then, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code.
-> JIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. 
   It also ensures that the prioritized method calls are optimized.
-> Once the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution.


Platform Independence:
-> Java is platform independent means we can run the same program in any software and hardware and will get the same result.
->. Java source code is compiled into bytecode, which is platform-independent. 
    The JVM interprets this bytecode and translates it into machine code specific to the operating system it is running on. 
      This allows Java programs to run on any device with a compatible JVM.

Oops Concept:
->Java follows various Oops concepts, namely abstraction, encapsulation , inheritance and polymorphism.


Multi threading support:
-> Java supports Multithreaded programming,  that allows multiple threads to run concurrently, enabling the execution of multiple tasks simultaneously.
 -> This improves the performance of applications


Garbage Collection:
->Java has an in built garbage collector,
-> Garbage collection in Java is the process by which the JVM automatically identifies and frees memory occupied by objects that are no longer referenced by the application. 
-> This helps in managing memory efficiently and preventing memory leaks.
 -> The garbage collector runs in the background and reclaims memory, making it available for new object creation.



JDK
----------
-> The JDK (Java Development Kit) is a software development kit used to develop Java applications.

->  It includes the JRE (Java Runtime Environment) and development tools like the compiler (java c ). 

JRE
----
JRE is Java Runtime Environment
It is used to run java applications
It Includes JVM and provides the necessary runtime libraries for java applications.it is like a tool box


JVM
---------
JVM (Java Virtual Machine), which is responsible for converting Java bytecode into machine-specific code for execution.

It is responsible for loading, verifying, and executing the bytecode created in Java.

-> JVM performs tasks such as memory management, garbage collection, and optimization, ensuring efficient execution of Java applications.


. How does Java handle memory management?
---------------------------------------------
Java handles memory management through a combination of stack and heap memory allocation and garbage collection. 
The JVM automatically manages the allocation and deallocation of memory, with stack memory used for method calls and local variables, and heap memory used for dynamically allocated objects.
 Garbage collection ensures that memory used by objects no longer in use is reclaimed.



Explain the JVM architecture?
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Java Virtual Machine , that provides a runtime environment to execute the bytecode.

-> it contains key components which are class loader, memory area, execution engine etc.



Class Loaders
---------------------

-> The task of Class Loader is to load the required classes and interfaces to the JVM when required. 
Example- To get input from the console, we require the scanner class. And the Scanner class is loaded by the Class Loader.



There are three types of Class loaders:

System Class Loader
-> It loads all the classes from the class path.

Extension Class Loader
-> It loads all the classes from the extension directory.

Bootstrap Class Loader
-> It loads all the pre-defined java classes.








 What are Memory storages available with JVM?
-------------------------------------------------------

Class Area: 
---------------

stores class-level data of every class such as the runtime constant pool, field, and method data, and the code for methods.

Class Area holds class-level data of each class file such as metadata, constant run pool, and static variables.

Heap: 
------------
-> when we create any object in the java program then that object was created in the heap memory. And it was referenced from the stack memory.
->  It is used to allocate memory to objects during run time.

Stack:
--------------
-> When we write a java program then all the variables, methods, etc are stored in the stack memory.

The stack is used for storing temporary variable.
 This component has a stack frame which is allocated one frame to each thread and
 when the execution of the thread is completed then that frame is also gets destroyed.

Program Counter Register:
---------------------------------
This component contains the address of JVM instruction which currently being executed.

Native Method Stack: 
------------------------
 stores all the native methods used in the application.





Execution Engine
----------------
It contains:

A virtual processor
An interpreter that executes the instructions after reading the bytecode.
JIT compiler, used for improving the performance due to the slow execution. 
It compiles the similar part of the bytecode at the same time which reduces the total time needed for compilation.



Java Native Interface
----------------------------

It provides an interface which is needed for communicating with another application developed in another language like C, C++, C# etc.


























 Define System.out.println().
---------------------------------------
System.out.println() is used to print the message on the console. System - It is a class present in java.lang package.

 Out is the static variable of type PrintStream class present in the System class.
 println() is the method present in the PrintStream class.

So if we justify the statement, then we can say that if we want to print anything on the console then we need to call the println() method that was present in PrintStream class. And we can call this using the output object that is present in the System class.














44. What is the main method in Java and why is it important?
----------------------------------------------------------------
-> The main method in Java is the entry point for any standalone application. 
-> It has the signature public static void main(String[] args) and is called by the JVM to start the application.
->  The main method allows the program to be executed and provides an entry point for the application logic.


1. Can you describe your experience with Java programming?
I have extensive experience in Java programming, having worked on various projects ranging from web applications to backend services. My experience includes developing, testing, and maintaining Java-based applications, leveraging frameworks such as Spring and Hibernate. I am proficient in writing clean, efficient code and utilizing Java’s object-oriented principles to create scalable and robust software solutions

-----------------------------------------------------------------
1. Platform Independent: Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of the bytecode. That is why we call java a platform-independent language.

2. Object-Oriented Programming Language: Organizing the program in the terms of a collection of objects is a way of object-oriented programming, each of which represents an instance of the class.

The four main concepts of Object-Oriented programming are:

Abstraction
Encapsulation
Inheritance
Polymorphism
3. Simple:  Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, and Explicit memory allocation. 

4. Robust:  Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation.

5. Secure:  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also, java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure.

6. Distributed:  We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.

7. Multithreading:  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.

8. Portable:  As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.

9. High Performance: Java architecture is defined in such a way that it reduces overhead during the runtime and at some times java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.

10. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add classes,  new methods to existing classes, and even create new classes through sub-classes. Java even supports functions written in other languages such as C, C++ which are referred to as native methods.



