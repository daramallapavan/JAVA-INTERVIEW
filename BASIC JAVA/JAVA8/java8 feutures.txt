Java Functional Interfaces
------------------------------------------------------------------------------------------------------------------------------------------------------------
An Interface that contains exactly one abstract method is known as functional interface.
 It can have any number of default, static methods but can contain only one abstract method.
 It can also declare methods of object class.

It is a new feature in Java, which helps to achieve functional programming approach.


Example
---------

There are many functional interfaces already present in java such as Comparable, Runnable, Comparator.


Since Runnable has only one method, it is considered a functional interface.


Java provides predefined functional interfaces to deal with functional programming by using lambda and method references.

Function
Supplier
Consumer
Predicate




Lambda Expressions
----------------------------------------------------------------------------------------------------------------------------------------------------------


The Lambda expression is used to provide the implementation of an functional interface.

 As lambda expressions help reduce the code compared to any anonymous classes.

 It saves a lot of code. 

 we don't need to define the method again for providing the implementation.
 Here, we just write the implementation code.



It is very useful in collection library. It helps to iterate, filter and extract data from collection.


Lambda expression is an anonymous function that has a set of parameters, a lambda (->) symbol, and a function body.
 Essentially, it is a function without a name.


A lambda expression can have zero, one or more parameters
->

When there is a single parameter, it is not mandatory to use parentheses.

Multiple parameters are enclosed in mandatory parentheses and separated by commas.

The body of the lambda expressions can contain zero, one, or more statements.
->

If the body of lambda expression has a single statement, curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression.
 When there is more than one statement in the body then these must be enclosed in curly brackets.





Method Reference
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Method reference is used to refer method of functional interface. 
It is compact and easy form of lambda expression.
 Each time when you are using lambda expression to just referring a method, you can replace your lambda expression with method reference. 


*Sometimes , a lambda expression only calls an existing method, in those cases , it looks clear to refer to the existing method by name.

It is used to refer  method of functional interface to an existing method.

Mainly it is used for code reusability.

Functional Interface's abstract method can be mapped to specific existing method using double colon operator (::) . This is Method reference.

Hence Method reference is an alternative to lambda expression.



Types of Method References
----------------------------
Reference to a static method.
Reference to an instance method.
Reference to a constructor.




 10) What are defaults methods? 
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
Default methods are those methods in an interface that have a body and use the default keyword. 
They were introduced in Java 8, mainly for backward compatibility.


By adding default method in interface,
                   you can provide default implementation of it without affecting implementing classes as it includes implementation of that method 
                   and any implementing class which needs that method can override it.


 Have you ever faced a situation, 
            when you created an interface and many classes implemented that interface.
            Now you need to add new methods to interface. After adding new methods, your java project will be full of compilation errors
            because you need to add these new methods to all classes which are implementing that interface 
            (If a class implement an interface then you have to implement all its methods in the class)
 
 
 
				   
				   
				   
What about multiple Inheritance?
                Adding default implementation to the interface can give rise to ambiguity in multiple inheritance. 
				As two interface can provide same default method and there can be ambiguity while calling.
				Java 8 will give you compile time exception.
				
				you can solve this compilation error by overriding decorateWithPaints method in Room class
 


) What is Optional? Why and how can you use it?
--------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 The Optional class used to represent a value that may be present or may not be.
This class helps in avoiding null pointer exceptions by providing methods to check the presence of a value before accessing it.
This helps null values handling more effectively.

 
Java 8 introduced a new class called Optional, primarily to avoid NullPointerException in Java. The Optional class encapsulates an optional value that may or may not be present.
 It acts as a wrapper around an object and can be used to prevent NullPointerExceptions.
 
 
 
 Java introduced a new class Optional in jdk8. It is a public final class and used to deal with NullPointerException in Java application.
 You must import java.util package to use this class.
 It provides methods which are used to check the presence of value for particular variable.
 











