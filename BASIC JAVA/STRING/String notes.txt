What is String in Java?
----------------------------------------------------------------------------------------------------------------------------------------------------
 String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. 


How to create a string object?
--------------------------------------------
There are two ways to create String object:

By string literal:
------------------

Java String literal is created by using double quotes. For Example:

String s="welcome";  

Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool,
 a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool.



Why Java uses the concept of String literal?
---------------------------------------------
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).

By new keyword:
---------------

String s=new String("Welcome");//creates two objects and one reference variable  

In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. 
The variable s will refer to the object in a heap (non-pool).



Immutable String in Java
-------------------------
String objects are immutable
Once String object is created its data or state can't be changed but a new String object is created.


   String s="Sachin";  
   s. concat(" Tendulkar")

Here Sachin is not changed but a new object is created with Sachin Tendulkar.

but s reference variable still refers to "Sachin" not to "Sachin Tendulkar".

But if we explicitly assign it to the reference variable, it will refer to "Sachin Tendulkar" object.


Why String class is Final in Java?
------------------------------------
The reason behind the String class being final is because no one can override the methods of the String class.
 So that it can provide the same features to the new String objects as well as to the old ones.



Why String objects are immutable in Java?
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
string pool is possible only because string is immutable in java.,

 Suppose there are 5 reference variables, all refer to one object "Sachin". If one reference variable changes the value of the object, 
it will be affected by all the reference variables. That is why String objects are immutable in Java.

this way runtime saves a lot of heap space because different string variables can refer to the same string variable in the pool.

ex:


String references are used to store various attributes like username
 The username and password cannot be modified by any intruder because String objects are immutable. This can make the application program more secure.




if string is not immutable then it would cause a severe security threat to the application, for example database username and password are passed as string to get database connection, since string is immutable ,its value cant be changed otherwise any hacker could change the referenced value to cause security issues in the application.

since string is immutable ,it is safe for multithreading ,A single string instance can be shared across different threads. this avoids the use of synchronization for thread safety. 
 No external synchronization is required if the String objects are immutable

As the String object is immutable we don't have to take care of the synchronization that is required while sharing an object across multiple threads.



since string is immutable, its hash code is cached at the time of creation. it doesn't need to be calculate again .this makes its a great candidate for the key in a map. Its processing is faster than other HashMap key objects. This is why string is most widely used as HashMap keys.


(or)

Multithreading: The safety of threads regarding the String objects is an important aspect in Java. No external synchronization is required if the String objects are immutable. Thus, a cleaner code can be written for sharing the String objects across different threads. The complex process of 
concurrency is facilitated by this method.

Collections: In the case of Hashtables and HashMaps, keys are String objects. If the String objects are not immutable, then it can get modified during the period when it resides in the HashMaps. Consequently, the retrieval of the desired data is not possible. Such changing states pose a lot of risks. Therefore, it is quite safe to make the string immutable.




Substring
------------------------------------------------------------------------------------------------------------------------------------------------------------------


A part of String is called substring. In other words, 
substring is a subset of another String.
 Java String class provides the built-in substring() method that extract a substring from the given string by using the index values passed as an argument.
 In case of substring() method start Index is inclusive and end Index is exclusive.


String and String Buffer
----------------------------

String is slow and consumes more memory when we concatenate too many strings because every time it creates new instance.
String class overrides the equals() method of Object class. So you can compare the contents of two strings by equals() method.



String Buffer is fast and consumes less memory when we concatenate t strings.
String Buffer class doesn't override the equals() method of Object class.



Java String Buffer Class
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java String Buffer class is used to create mutable  String objects.

 The String Buffer class in Java is the same as String class except it is mutable i.e. it can be changed.

String Buffer is synchronized i.e. thread safe. It means two threads can't call the methods of String Buffer simultaneously.

String Buffer was introduced in Java 1.

Performance-> slow 

Java StringBuilder Class
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java StringBuilder class is used to create mutable  String. 

The Java StringBuilder class is same as String Buffer class except that it is non-synchronized. 

StringBuilder was introduced in Java 1.5

Performance-> fast



How would you differentiate between a String, String Buffer, and a StringBuilder?
------------------------------------------------------------------------------------------------------------------------------------------------
Storage area: 
-> In string, the String pool serves as the storage area. For StringBuilder and String Buffer, heap memory is the storage area.

Mutability: 
-> A String is immutable, whereas both the StringBuilder and String Buffer are mutable.

Efficiency:
->  It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations. 
The speed of a String Buffer is more than a String and less than a StringBuilder. 
(For example appending a character is fastest in StringBuilder and very slow in String because a new memory is required for the new String with appended character.)

Thread-safe: 
-> In the case of a threaded environment, StringBuilder and String Buffer are used whereas a String is not used. 
However, StringBuilder is suitable for an environment with a single thread, and a String Buffer is suitable for multiple threads.



Java to String() Method
------------------------------------------------------------------------------------
If you want to represent any object as a string, to String() method comes into existence.

The to String() method returns the String representation of the object.




create a immutable class:
-----------------------------------------------------------------------------------------------------------

make your class as final 

declare variables private and final

 initialize all variables in constructor

say no to setters method, only getter methods



performing cloning of mutable objects while returning from getter method

variable
-------------
 List<String> -> new Array List<>(variable) from getter methods

Address-> new Address(address.id,address.name) from getter methods

Date-> (Date)date. Clone() from getter methods






Why is the character array preferred over string for storing confidential information?
-----------------------------------------------------------------------------------------------

-> In Java, a string is basically immutable i.e. it cannot be modified. After its declaration,
  it continues to stay in the string pool as long as it is not removed in the form of garbage.

-> As a result, vital information can be stolen for pursuing harmful activities by hackers if a memory dump is illegally accessed by them.
 Such risks can be eliminated by using mutable objects or structures like character arrays for storing any variable.
 After the work of the character array variable is done, the variable can be configured to blank at the same instant. 
Consequently, it helps in saving heap memory and also gives no chance to the hackers to extract vital data






-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=============3. Why Is String Immutable in Java?
The key benefits of keeping this class as immutable are caching, security, synchronization, and performance.

Let’s discuss how these things work.

3.1. Introduce to String Pool
The String is the most widely used data structure. Caching the String literals and reusing them saves a lot of heap space because different String variables refer to the same object in the String pool. String intern pool serves exactly this purpose.

Java String Pool is the special memory region where Strings are stored by the JVM. Since Strings are immutable in Java, the JVM optimizes the amount of memory allocated for them by storing only one copy of each literal String in the pool. This process is called interning:

String s1 = "Hello World";
String s2 = "Hello World";
         
assertThat(s1 == s2).isTrue();
Copy
Because of the presence of the String pool in the preceding example, two different variables are pointing to same String object from the pool, thus saving crucial memory resource.

Why String Is Immutable In Java
We have a separate article dedicated to Java String Pool. For more information, head on over to that article.

3.2. Security
The String is widely used in Java applications to store sensitive pieces of information like usernames, passwords, connection URLs, network connections, etc. It’s also used extensively by JVM class loaders while loading classes.

Hence securing String class is crucial regarding the security of the whole application in general. For example, consider this simple code snippet:

void criticalMethod(String userName) {
    // perform security checks
    if (!isAlphaNumeric(userName)) {
        throw new SecurityException(); 
    }
	
    // do some secondary tasks
    initializeDatabase();
	
    // critical task
    connection.executeUpdate("UPDATE Customers SET Status = 'Active' " +
      " WHERE UserName = '" + userName + "'");
}
Copy
In the above code snippet, let’s say that we received a String object from an untrustworthy source. We’re doing all necessary security checks initially to check if the String is only alphanumeric, followed by some more operations.

Remember that our unreliable source caller method still has reference to this userName object.

If Strings were mutable, then by the time we execute the update, we can’t be sure that the String we received, even after performing security checks, would be safe. The untrustworthy caller method still has the reference and can change the String between integrity checks. Thus making our query prone to SQL injections in this case. So mutable Strings could lead to degradation of security over time.

It could also happen that the String userName is visible to another thread, which could then change its value after the integrity check.

In general, immutability comes to our rescue in this case because it’s easier to operate with sensitive code when values don’t change because there are fewer interleavings of operations that might affect the result.

3.3. Synchronization
Being immutable automatically makes the String thread safe since they won’t be changed when accessed from multiple threads.

Hence immutable objects, in general, can be shared across multiple threads running simultaneously. They’re also thread-safe because if a thread changes the value, then instead of modifying the same, a new String would be created in the String pool. Hence, Strings are safe for multi-threading.

3.4. Hashcode Caching
Since String objects are abundantly used as a data structure, they are also widely used in hash implementations like HashMap, HashTable, HashSet, etc. When operating upon these hash implementations, hashCode() method is called quite frequently for bucketing.

The immutability guarantees Strings that their value won’t change. So the hashCode() method is overridden in String class to facilitate caching, such that the hash is calculated and cached during the first hashCode() call and the same value is returned ever since.

This, in turn, improves the performance of collections that uses hash implementations when operated with String objects.

On the other hand, mutable Strings would produce two different hashcodes at the time of insertion and retrieval if contents of String was modified after the operation, potentially losing the value object in the Map.

3.5. Performance
As we saw previously, String pool exists because Strings are immutable. In turn, it enhances the performance by saving heap memory and faster access of hash implementations when operated with Strings.

Since String is the most widely used data structure, improving the performance of String have a considerable effect on improving the performance of the whole application in general.

========================================================================













-----------------------------------------------------------------------------------------------------------------------------------------------------------------

31) How do you count the number of occurrences of each character in a string?

Given a string , you have to count the number of occurrences of each character in it. For example, If “Java J2EE Java JSP J2EE” is the given string then occurrences of each character in this string is E=4, 2=2, v=2,  =4, P=1, S=1, a=4, J=5.

[Solution]

32) How do you remove all white spaces from a string in Java?

[Solution]

33) How do you find duplicate characters in a string?

Write a Java program to find duplicate characters and their count in a given string. For example, in a string “Better Butter”, duplicate characters and their count is t : 4, e : 3, r : 2 and B : 2.

[Solution]

34)  Write a Java program to reverse a string?

This is one of the most frequently asked Java string program in the technical round of Java fresher’s interview. Interviewer may ask you to write different ways to reverse a string or he may ask you to reverse a string without using in-built methods or he may ask you to reverse a string using recursion.

[Solution]

 35) Write a Java program to check whether two strings are anagram or not?

Anagram program is another frequently asked Java string interview program. In this article, we will discuss 4 different methods to check for anagram strings.

[Solution]

36) Write a Java program to reverse a given string with preserving the position of spaces?

For example, if “I Am Not String” is the given string then the reverse of this string with preserving the position of spaces is “g ni rtS toNmAI”.

[Solution]

37) How do you convert string to integer and integer to string in Java?

[Solution]

38) Write a code to prove that strings are immutable in Java?

[Solution]

39) Write a code to check whether one string is a rotation of another?

If s1 and s2 are two given strings, then your code must check whether s2 is a rotated version of s1. For Example, If “JavaJ2eeStrutsHibernate” is a string then below are some rotated versions of this string.

“StrutsHibernateJavaJ2ee”, “J2eeStrutsHibernateJava”, “HibernateJavaJ2eeStruts”.

[Solution]

40) Write a Java program to reverse each word of a given string?

For example, If “Java Concept Of The Day” is input string then output should be “avaJ tpecnoC fO ehT yaD”.

[Solution]

41) Print all substrings of a string in Java?

[Solution]

42) Print common characters between two strings in alphabetical order in Java?

For example, if "thin sticks" and "thick bricks" are two given input strings then common characters between them in alphabetical order are [c, h, i, k, s, t].

[Solution]

43) How find maximum occurring character in a string in Java?

For example, if “Java Concept Of The Day” is the input string then ‘a’ is the maximum occurring character which occurred 3 times in the string. 

[Solution]

44) Write a Java program to find all permutations of a string?

Write a Java program to find all permutations of a string recursively. For example, all permutations of string “JSP” are,

JSP
JPS
SJP
SPJ
PJS
PSJ

[Solution]

45) How do you find longest substring without repeating characters in the given string?

For example, if “javaconceptoftheday” is the input string, then the longest substring without repeating or duplicate characters is “oftheday” and its length is 8.

[Solution]

46) How to reverse a sentence word by word in Java?

For example, If “Java Concept Of The Day” is an input string then output will be “Day The Of Concept Java”.

[Solution]

47) How to remove all vowels from a string in Java?

Your program should take input string from the user and remove all vowels from this string and print it without vowels.

[Solution]

48) How to replace a specific string in a text file?

Your program should take one text file as input and replace a specific string in that text file with new string.

[Solution]

49) Palindrome Programs In Java

Palindrome programs are one of the most asked Java string programming interview questions for freshers. In this article, you will learn to write palindrome program using 4 different methods. They are iterative method, recursive method, Palindrome program using StringBuffer and palindrome program using IntStream of Java 8. 

[Solution]

50) How do you find first repeated and non-repeated character in the given string in Java?

Given a string, your code must find out the first repeated as well as non-repeated character in that string. For example, if “JavaConceptOfTheDay” is the given string, then ‘J’ is a first non-repeated character and ‘a’ is a first repeated character.

[Solution]

51) Write a Java program to find the percentage of uppercase letters, lowercase letters, digits and special characters in a given string?

For example, in “Tiger Runs @ The Speed Of 100 km/hour.”,

Number of uppercase letters is 5. So percentage is 13.16%
Number of lowercase letters is 20. So percentage is 52.63%
Number of digits is 3. So percentage is 7.89%
Number of other characters is 10. So percentage is 26.32%

[Solution]

52) How do you swap two string variables without using third or temp variable in Java?

[Solution]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




1) Is String a keyword in Java?

No. String is not a keyword in Java. String is a final class in java.lang package which is used to represent the set of characters in Java.

2) Is String a primitive type or derived type?

String is a derived type.

3) In how many ways you can create string objects in Java?

There are two ways to create string objects in Java. One is using new operator and another one is using string literals. The objects created using new operator are stored in the heap memory and objects created using string literals are stored in string constant pool.

1
2
3
String s1 = new String("abc");          //Creating string object using new operator
 
String s2 = "abc";        //Creating string object using string literal
4) What is string constant pool?

String objects are most used data objects in Java. Hence, Java has a special arrangement to store the string objects. String Constant Pool is one such arrangement. String Constant Pool is the memory space in the heap memory specially allocated to store the string objects created using string literals. In String Constant Pool, there will be no two string objects having the same content.

Whenever you create a string object using string literal, JVM first checks the content of the object to be created. If there exist an object in the string constant pool with the same content, then it returns the reference of that object. It doesn’t create a new object. If the content is different from the existing objects then only it creates new object.

5) What is special about string objects as compared to objects of other derived types?

One special thing about string objects is that you can create string objects without using new operator i.e using string literals. This is not possible with other derived types (except wrapper classes). One more special thing about strings is that you can concatenate two string objects using ‘+’. This is the relaxation Java gives to string objects as they will be used most of the time while coding. And also Java provides string constant pool to store the string objects.

Also Read : Java Strings Quiz

6) What do you mean by mutable and immutable objects?

Immutable objects are like constants. You can’t modify them once they are created. They are final in nature. Where as mutable objects are concerned, you can perform modifications on them.

7) Which is the final class in these three classes – String, StringBuffer and StringBuilder?

All three are final.

8) What is the difference between String, StringBuffer and StringBuilder?

[Answer]

9) Why StringBuffer and StringBuilder classes are introduced in Java when there already exist String class to represent the set of characters?

The objects of String class are immutable in nature. i.e you can’t modify them once they are created. If you try to modify them, a new object will be created with modified content. This may cause memory and performance issues if you are performing lots of string modifications in your code. To overcome these issues, StingBuffer and StringBuilder classes are introduced in Java.

10) How many objects will be created in the following code and where they will be stored in the memory?

1
2
3
String s1 = "abc";
 
String s2 = "abc";
Only one object will be created and this object will be stored in the string constant pool.

11) How do you create mutable string objects in Java?

Using StringBuffer and StringBuilder classes. These classes provide mutable string objects.

12) Which one will you prefer among “==” and equals() method to compare two string objects?

I prefer equals() method because it compares two string objects based on their content. That provides more logical comparison of two string objects. If you use “==” operator, it checks only the references of two objects not their content. It may not be suitable in all situations. So, rather stick to equals() method to compare two string objects. [more]

13) Which class do you recommend among String, StringBuffer and StringBuilder classes if I want mutable and thread safe objects?

StringBuffer

14) How do you convert given string to char array?

Using toCharArray() method.

15) How many objects will be created in the following code and where they will be stored?

1
2
3
String s1 = new String("abc");
 
String s2 = "abc";
Here, two string objects will be created. Object created using new operator (s1) will be stored in the heap memory. The object created using string literal (s2) is stored in the string constant pool.

Also Read : 300+ Java Interview Questions & Answers

16) Where exactly string constant pool is located in the memory?

Inside the heap memory. JVM reserves some part of the heap memory to store string objects created using string literals. [more]

17) I am performing lots of string concatenation and string modification in my code. which class among string, StringBuffer and StringBuilder improves the performance of my code. Remember I also want thread safe code?

StringBuffer class gives better performance in this scenario. As String class is immutable, if you use this class, a new object will be created after every string concatenation or string modification. This will slow down the code. You can use StringBuilder also, but it is not thread safe. So, StringBuffer will be optimal choice here.

Java String Interview Questions And Answers
18) What is string intern?

String object in the string constant pool is called as String Intern. You can create an exact copy of heap memory string object in string constant pool. This process of creating an exact copy of heap memory string object in the string constant pool is called interning. intern() method is used for interning. [more]

19) What is the main difference between Java strings and C, C++ strings?

In C and C++, strings are terminated with null character. But in Java, strings are not terminated with null character. Strings are treated as objects in Java.

20) How many objects will be created in the following code and where they will be stored?

1
2
3
String s1 = new String("abc");
 
String s2 = new String("abc");
Two objects will be created and they will be stored in the heap memory.

21) Can we call S
tring methods using string literals?

Yes, we can call String methods using string literals. Here are some examples,

1
2
3
4
5
"abc".charAt(0)
 
"abc".compareTo("abc")
 
"abc".indexOf('c')
22) do you have any idea why strings have been made immutable in Java?

a) Immutable strings increase security. As they can’t be modified once they are created, so we can use them to store sensitive data like username, password etc.

b) Immutable strings are thread safe. So, we can use them in a multi threaded code without synchronization.

c) String objects are used in class loading. If strings are mutable, it is possible that wrong class is being loaded as mutable objects are modifiable.

[More]

23) What do you think about string constant pool? Why they have provided this pool as we can store string objects in the heap memory itself?

String constant pool increases the reusability of existing string objects. When you are creating a string object using string literal, JVM first checks string constant pool. If that object is available in string constant pool, it returns reference of that object rather than creating a new object. This will speed up your application as only reference is returned. And it also saves the memory as no two objects with same content are created.

24) What is the similarity and difference between String and StringBuffer class?

The main similarity between String and StringBuffer class is that both are thread safe. The main difference between them is that String objects are immutable where as StringBuffer objects are mutable.

25) What is the similarity and difference between StringBuffer and StringBuilder class?

The main similarity between StringBuffer and StringBuilder class is that both produces mutable string objects. The main difference between them is that StringBuffer class is thread safe where as StringBuilder class is not thread safe.

26) What are the new String methods introduced in Java 11?

isBlank(), lines(), repeat(), strip(), stripLeading() and stripTrailing() are the new methods introduced to String class in Java 11. (See More)

27) Can we use strings in switch case?

Yes, from Java 7, strings can be used in switch case.

28) How Java 8 StringJoiner and String.join() method differ from each other?

StringJoiner class internally uses StringBuilder class to join the strings. It is placed in java.util package. Using Java 8 StringJoiner, you can join only the strings, but not the array of strings or list of strings.

String.join() method internally uses StringJoiner class. This method can be used to join strings or array of strings or list of strings, but only with delimiter not with prefix and suffix. (See More)

29) Why the strings are the most used objects as keys of HashMap in Java?

As string objects are immutable, their hashcode is cached at the time of object creation. There is no need to calculate it again and again. That’s why the strings are the most used objects as keys of HashMap in Java.


--------------------------------------

. Write a Java Program to check if any number is a magic number or not. A number is said to be a magic number if after doing sum of digits in each step and inturn doing sum of digits of that sum, the ultimate result (when there is only one digit left) is 1.
Example, consider the number:

Step 1: 163 => 1+6+3 = 10
Step 2: 10 => 1+0 = 1 => Hence 163 is a magic number
public class IBMagicNumber{

   public static void main(String[] args) { 
       int num = 163;  
       int sumOfDigits = 0;
       while (num > 0 || sumOfDigits > 9) 
       { 
           if (num == 0) 
           { 
               num = sumOfDigits; 
               sumOfDigits = 0; 
           } 
           sumOfDigits += num % 10; 
           num /= 10; 
       } 

       // If sum is 1, original number is magic number 
       if(sumOfDigits == 1) {
           System.out.println("Magic number");
       }else {
           System.out.println("Not magic number");
       }
   }
}


















